import unittest
import elasticsearch
import cfg.crud as crud
import com.nttdata.dgi.util.io as io
from datetime import datetime
from com.nttdata.dgi.persistence.persistence_factory import PersistenceFactory
from com.nttdata.dgi.persistence.persistor import Persistor
from com.nttdata.dgi.persistence.persistor_type import PersistorType
from com.nttdata.dgi.persistence.ipersistor import IPersistor



class ElasticSearchTest(unittest.TestCase):

    def __init__(self, *args, **kwargs):
        super(ElasticSearchTest, self).__init__(*args, **kwargs)

    def setUp(self) -> None:
        return

    def test_0001_no_persist_arguments(self):
        # Should fail, since no parameters are provided
        p: Persistor = PersistenceFactory().new(crud.ELASTICSEARCH_DETAILS, PersistorType.ELASTIC)
        p.persist()
        return

    def test_0002_persist_in_named_index_no_id(self):
        """
        Persists in ElasticPersistor a document in a given index.
        :return: self
        """
        p: Persistor = PersistenceFactory().new(crud.ELASTICSEARCH_DETAILS, PersistorType.ELASTIC)
        '''
        No document id is provided, therefore Elasticsearch has to provide its own.
        '''
        doc1 = {
            'author': 'Kimchy',
            'text': 'Kimchy cool.',
            'timestamp': datetime.now(),
        }
        '''
        If a doc is passed in the args, then the default index is taken from the persistor details. 
        If no default index  -> Exception. The id of the doc is auto-generated by Elasticsearch.  
        '''
        # p.persist(doc1)
        '''
        Index and document passed as argument to the method. The id is auto-generated by Elastic
        '''
        # p.persist(index="test3", document=doc1)
        '''
        Document id is provided inside the document. '''
        doc2 = {
            'id': '1',  # Used to identify the document in Elasticsearch
            'author': 'Ford',
            'text': 'Ford is cool.',
            'timestamp': datetime.now(),
        }
        # p.persist(index="test3", document=doc2)

        '''
        Document id is provided both inside the document and the method:
        In this case, the id for Elastic is the one in the method, and 
        the id inside the document is kept unaltered.'''
        doc2 = {
            'id': 'ABCDE',  # Used to identify the document in Elasticsearch
            'author': 'Pontiac',
            'text': 'Pontiac is cool.',
            'timestamp': datetime.now(),
        }
        p.persist(index="test3", content=doc2, id=1024)
        return

    def test_0003_persist_in_named_index_no_id(self):
        """
        Persists in ElasticPersistor a document in a given index.
        :return: self
        """

        json_test = {"reference": "eng_cellar:819291ca-8c1c-11e9-9369-01aa75ed71a1_en", "rsc_id": "ac0f7d3b3cbf3011c7c7f69a1fa13a1a", "lang": "en", "timestamp": io.now(), "rsc_url": "https://eur-lex.europa.eu/legal-content/EN/TXT/PDF/?uri=cellar:819291ca-8c1c-11e9-9369-01aa75ed71a1", "parts": [{"part_id": "127437452817427058292238049958489191295", "part_type": "body", "reference_link": {"document_type": "pdf", "document_path": "../../camss_sis_corpora\\pdf\\ac0f7d3b3cbf3011c7c7f69a1fa13a1a.pdf", "txt_path": "../../camss_sis_corpora/camss_sis_txt\\body\\127437452817427058292238049958489191295.txt"}}]}
        p: IPersistor = PersistenceFactory().new(crud.ELASTICSEARCH_DETAILS, PersistorType.ELASTIC)

        '''
        Document id is provided inside the document. '''

        doc_test_lem = {"id": "77e21850383da6909b9f842ce5ef3a99",
                        "modified": io.now(),
                        "terms": {
                            "77e21850383da6909b9f842ce5ef3a99": [{
                                "ee5b02730f46da5da2693105aa308529":
                                {
                                    "lemma": "state member state",
                                    "term": "states those member states",
                                    "freq": 2
                                },
                                "10ae9fc7d453b0dd525d0edf2ede7961":
                                {
                                    "lemma": "list",
                                    "term": "listed",
                                    "freq": 13
                                }
                            }]
                        }}

        doc_test_lem_2 = {"rsc_id": "77e21850383da6909b9f842ce5ef3a99",
                          "part_id": "55705594741352276138083873704993455486",
                          "part_type": "body",
                          "modified": io.now(),
                          "terms": [
                              {
                                  "lem_id": "ee5b02730f46da5da2693105aa308529",
                                  "lemma": "member",
                                  "term": "the member",
                                  "freq": 2
                              },
                              {
                                  "lem_id": "ee5b02730f46da5da6693105aa308529",
                                  "lemma": "agriculture",
                                  "term": "the agriculture",
                                  "freq": 2
                              }
                          ]}

        doc_test_lem_3 = {"reference": "eng_cellar:ab920b5e-50a6-49c9-8ffc-880a6bbfc20f_en",
                          "modified": io.now(),
                          "reference_hash": "d1695d48a69ca0d737f89e7b63f9f26f",
                          "lang": "en",
                          "parts": [
                              {
                                  "id": "77e21850383da6909b9f842ce5ef3a99",
                                  "part_type": "body",
                                  "reference_link": {
                                      "document_type": "pdf",
                                      "document_path": "../../corpora\\pdf\\77e21850383da6909b9f842ce5ef3a99.pdf",
                                      "txt_path": "../../corpora/txt\\77e21850383da6909b9f842ce5ef3a99.txt", "document_link": "https://eur-lex.europa.eu/legal-content/EN/TXT/PDF/?uri=cellar:ab920b5e-50a6-49c9-8ffc-880a6bbfc20f"
                                  }
                              },
                              {"id": "87e21850383da6909b9f842ce5ef3a99",
                               "part_type": "title",
                               "reference_link": {
                                       "document_type": "pdf",
                                       "document_path": "../../corpora\\pdf\\77e21850383da6909b9f842ce5ef3a99.pdf",
                                       "txt_path": "../../corpora/txt\\77e21850383da6909b9f842ce5ef3a99.txt",
                                       "document_link": "https://eur-lex.europa.eu/legal-content/EN/TXT/PDF/?uri=cellar:ab920b5e-50a6-49c9-8ffc-880a6bbfc20f"}
                               }]
                          }

        str_date = io.now().strftime("%Y%m%d")
        # p.persist(index=f"sis-raw-{str_date}", content=doc_test_lem)
        # p.persist(index=f"sis-lem-{str_date}", content=doc_test_lem_2)
        p.persist(index=f"camss-test-{str_date}", content=json_test)
        return

    def test_0002_drop(self):
        p: Persistor = PersistenceFactory().new(crud.ELASTICSEARCH_DETAILS, PersistorType.ELASTIC)
        '''
        Drop a document from default index, no need to specify that it's a document.
        '''
        try:
            p.drop(1)   # The id of the document can be an integer or a str
        except elasticsearch.NotFoundError:
            print("Document not found.")
        '''
        Or naming the argument
        '''
        try:
            p.drop(id=1)   # The id of the document can be an integer or a str
        except elasticsearch.NotFoundError:
            print("Document not found.")

        '''
        Drop a document of an index
        '''
        try:
            p.drop(id=2, index='sembu')
        except elasticsearch.NotFoundError:
            print("Document not found")
        '''
        Drop an index
        '''
        try:
            p.drop(index="sembu")
        except elasticsearch.NotFoundError:
            print("Index not found.")

        return

    def tearDown(self) -> None:
        return


if __name__ == '__main__':
    unittest.main()
